package com.example.demo;

import io.vertx.core.Vertx;
import io.vertx.core.http.HttpServer;
import io.vertx.core.json.JsonArray;
import io.vertx.ext.jdbc.JDBCClient;
import io.vertx.ext.sql.ResultSet;
import io.vertx.ext.sql.SQLConnection;
import io.vertx.ext.sql.SQLOptions;
import io.vertx.ext.sql.UpdateResult;
import io.vertx.ext.web.Router;

import java.util.concurrent.ExecutionException;

import static com.example.demo.Utils.*;

public class Server {

    public static void main(final String[] args) throws ExecutionException, InterruptedException {
        final Vertx vertx = Vertx.vertx();
        final JDBCClient jdbcClient = createJdbcClient(vertx);

        clearExistingData(jdbcClient);

        final HttpServer httpServer = vertx.createHttpServer();
        final Router router = Router.router(vertx);

        router.route("/noop").handler(ctx -> {
            ctx.response()
                .putHeader("content-type", "text/plain")
                .end("Hello world");
        });

        router.route("/cpu").blockingHandler(ctx -> {
            final int randomNum = (int) (Math.floor(Math.random() * 8) + 30);
            final long fibonocci = generateFibonocci(randomNum);
            ctx.response()
                .putHeader("content-type", "text/plain")
                .end(new StringBuilder("fib(").append(randomNum).append(") = ").append(fibonocci).toString());
        });

        router.route("/sleep").blockingHandler(ctx -> {
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            ctx.response()
                .putHeader("content-type", "text/plain")
                .end("I'm awake");
        });

        router.route("/write").handler(routingCtx -> jdbcClient.getConnection(connectionCtx -> {
            if (connectionCtx.failed()) {
                routingCtx.fail(connectionCtx.cause());
            } else {
                final SQLConnection conn = connectionCtx.result();
                conn.setOptions(new SQLOptions().setAutoGeneratedKeys(true))
                    .updateWithParams("INSERT INTO t1 (message) VALUES (?)", new JsonArray().add(generateRandomMessage()), sqlCtx -> {
                        if (sqlCtx.failed()) {
                            routingCtx.fail(sqlCtx.cause());
                        } else {
                            final UpdateResult updateResult = sqlCtx.result();
                            routingCtx.response()
                                .putHeader("content-type", "text/plain")
                                .end("Added " + updateResult.getUpdated() + " rows, with ID(s): " + updateResult.getKeys().toString());
                        }
                    });
            }
        }));

        router.route("/read").handler(routingCtx -> jdbcClient.getConnection(connectionCtx -> {
            if (connectionCtx.failed()) {
                routingCtx.fail(connectionCtx.cause());
            } else {
                final SQLConnection conn = connectionCtx.result();
                conn.query("SELECT message, COUNT(message) as 'count' FROM t1 GROUP BY message", sqlCtx -> {
                    if (sqlCtx.failed()) {
                        routingCtx.fail(sqlCtx.cause());
                    } else {
                        final ResultSet rs = sqlCtx.result();
                        routingCtx.response()
                            .putHeader("content-type", "text/plain")
                            .end(rs.getResults().toString());
                    }
                });
            }
        }));

        httpServer.requestHandler(router::accept).listen(8080);
        System.out.println("HTTP server started on port 8080");
    }
}
